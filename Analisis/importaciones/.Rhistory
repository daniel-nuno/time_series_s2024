knitr::opts_chunk$set(echo= TRUE,
fig.height = 6, fig.width = 7)
test
knitr::opts_chunk$set(echo= TRUE,
fig.height = 6, fig.width = 7)
library(readxl)
#raw_data = read_xlsx(path = "/Users/danielnuno/GitHub/time_series_s2024/Analisis/remesas banxico.xlsx", sheet = "Hoja1", col_names = FALSE)
raw_data = read_xlsx(path = "~/GitHub/time_series_s2024/Analisis/remesas/remesas banxico.xlsx", sheet = "Hoja1", col_names = FALSE)
head(raw_data, 20)
#raw_data = raw_data[-(1:18), ]
data = dplyr::slice(raw_data, -(1:18))
head(data, 2)
colnames(data) = c('date', 'value')
head(data, 2)
data$date = as.numeric(data$date)
data$date = as.Date(data$date, origin = "1899-12-30")
data$date = seq(from = min(data$date), to = max(data$date), by = "1 month")
library(lubridate)
library(tsibble)
data$date = yearmonth(data$date)
head(data, 2)
data$value = as.numeric(data$value)
head(data, 2)
data = as_tsibble(data, index=date, regular=TRUE)
head(data, 2)
interval(data)
library(ggplot2)
library(feasts)
feasts::autoplot(data) + ggtitle('Remesas por mes') + ylab('Millones de dólares') + xlab('Fecha')
data %>% gg_season(value, labels = "both") +
ggtitle('Remesas por año') + ylab('Millones de dólares') + xlab('Mes')
suppressWarnings(library(plotly))
yearly_data_plot = data %>% gg_season(value, labels = "both") +
ggtitle('Remesas por año') + ylab('Millones de dólares') + xlab('Mes')
ggplotly(yearly_data_plot)
subseries_plot = data %>% gg_subseries(value)
ggplotly(subseries_plot)
lags_plots = data %>% filter(year(date) > 2018) %>% gg_lag(value, geom = "point", lags = 1:12) + labs(x = "lag(Remesa, k)")
suppressWarnings(ggplotly(lags_plots))
data %>% ACF(value, lag_max = 12)
data %>% ACF(value, lag_max = 24) %>% autoplot() + labs(title='Remesas por año')
print(paste('fecha inicial', min(data$date)))
print(paste('fecha final', max(data$date)))
print(paste('observaciones', nrow(data)))
print(paste('existen', sum(is.na(data)), 'datos faltantes'))
summary(data[, 'value'])
boxplot = data %>%
mutate(year = year(date)) %>%
ggplot(aes(x = as.factor(year), y = value)) +
geom_boxplot() +
xlab('Año') +
ylab('Remesas')
ggplotly(boxplot)
sd(data$value)
var(data$value)
library(EnvStats)
kurtosis(data$value)
skewness(data$value)
shapiro.test(data$value)
library(ggExtra)
p <- ggplot(data, aes(x=date, y=value)) +
geom_hline(yintercept =1000) +
geom_hline(yintercept =3000) +
geom_point() +
ggtitle('Remesas por mes') + ylab('Millones de dólares') + xlab('Fecha')
ggMarginal(p, type='histogram', margins = 'y')
histogram = ggplot(data, aes(x = value)) +
geom_histogram( bins = 20, fill = "black", color = "black", alpha = 0.5) +
labs(title = "Histograma",
x = "Value",
y = "Densidad")
ggplotly(histogram)
ttl_m_dlrs <- data %>% select('value')
ttl_m_dlrs <- as.numeric(unlist(ttl_m_dlrs[,1]))
summary(ttl_m_dlrs)[2] - 1.5*IQR(ttl_m_dlrs) >= summary(ttl_m_dlrs)[1]
summary(ttl_m_dlrs)[5] + 1.5*IQR(ttl_m_dlrs) <= summary(ttl_m_dlrs)[6]
summary(ttl_m_dlrs)[2] - 3*IQR(ttl_m_dlrs) >= summary(ttl_m_dlrs)[1]
summary(ttl_m_dlrs)[5] + 3*IQR(ttl_m_dlrs) <= summary(ttl_m_dlrs)[6]
library(tidyverse)
p <- data %>% as_tibble %>% group_by(years=year(date)) %>%
summarise(remesas=sum(value)) %>%
arrange(desc(years))%>%
mutate(change = (remesas/lead(remesas) - 1) * 100) %>%
filter(years > 1995) %>%
filter(years < 2023)
mean_growth <- data %>% as_tibble %>% group_by(years=year(date)) %>%
summarise(remesas=sum(value)) %>%
arrange(desc(years))%>%
mutate(change = (remesas/lead(remesas) - 1) * 100) %>%
filter(years > 1995) %>%
filter(years < 2022) %>%
summarise(mean(change))
mean_growth <- mean_growth$`mean(change)`
ggplot(p, aes(x=years, y=change)) +
geom_line() +
geom_hline(yintercept=mean_growth) +
geom_hline(yintercept=0) +
ggtitle('Cambio porcentual por año') + ylab('%') + xlab('Mes')
train <- data %>% select(value) %>% filter_index("1995 Jan" ~ "2023 Jun")
test <- data %>% select(value) %>% filter_index("2023 Jun" ~ "2023 Dec")
tstng_prds <- 6
frcst_prds <- 6
library(fable)
models_fit <- train %>%
model(`Seasonal naive` = SNAIVE(value))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
test
train <- data %>% select(value) %>% filter_index("1995 Jan" ~ "2023 Jun")
test <- data %>% select(value) %>% filter_index("2023 Jul" ~ "2023 Dec")
tstng_prds <- 6
frcst_prds <- 6
library(fable)
models_fit <- train %>%
model(`Seasonal naive` = SNAIVE(value))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
train <- data %>% select(value) %>% filter_index("1995 Jan" ~ "2023 Jun")
test <- data %>% select(value) %>% filter_index("2023 Jul" ~ "2023 Dec")
tstng_prds <- 6
frcst_prds <- 6
library(fable)
models_fit <- train %>%
model(`Seasonal naive` = SNAIVE(value))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
test
models_tst
accuracy(models_fit)
(models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))
```{r}
accuracy(models_fit)
(models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))
models_fit %>% forecast(h = tstng_prds)
fcst = models_fit %>% forecast(h = tstng_prds)
accuracy(fcst, test)
glance(models_fit)
library(fable)
models_fit <- train %>%
model(`Seasonal naive` = SNAIVE(value))
models_tst <- models_fit %>% forecast(h = tstng_prds)
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
agument(models_fit)
agucment(models_fit)
augment(models_fit)
aug
aug
aug = augment(models_fit)
aug
aug %>% pull(.resid) %>% mean(na.rm = TRUE)
aug %>% autoplot(.resid) + xlab("Día") + ylab("") +
ggtitle("Residuales del método naïve")
aug %>%
ggplot(aes(x = .resid)) +
geom_histogram() +
ggtitle("Histograma de los residuales")
aug %>% ACF(.resid)
aug %>% ACF(.resid) %>% autoplot() + ggtitle("ACF of residuals")
train %>%
model(NAIVE(Close)) %>%
gg_tsresiduals()
train %>%
model(NAIVE(value)) %>%
gg_tsresiduals()
aug %>% ACF(.resid) %>% autoplot() + ggtitle("ACF of residuals")
train %>%
model(SNAIVE(value)) %>%
gg_tsresiduals()
library(tidyverse)
library(tidyquant)
library(tsibble)
library(plotly)
library(lubridate)
library(readr)
ADA_USD <- read_csv("ITESO/Series de Tiempo/ADA-USD.csv")
LUNA20314_USD <- read_csv(".../downloads/LUNA20314-USD.csv")
LUNA20314_USD <- read_csv("/Users/danielnuno/Downloads/LUNA20314-USD.csv")
LUNA20314_USD
LUNA20314_USD_tidy <- LUNA20314_USD %>%
as_tsibble(index = Date)
LUNA20314_USD_tidy
models_tst
?forecast
models_tst
class(models_tst)
models_tst
models_tst[1]
models_tst[1,3]
models_tst[1,3].value
models_tst[1,3]
models_tst %>% hilo(level = c(80, 95))
fcst = models_fit %>% forecast(h = tstng_prds)
fcst
aug = augment(models_fit)
aug
aug = augment(models_tst)
fcst = models_fit %>% forecast(h = tstng_prds)
aug = augment(fcst)
aug
aug = augment(models_fit)
aug
aug %>% pull(.resid) %>% mean(na.rm = TRUE)
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = 7), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
?decomposition_model
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ robust = TRUE),
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ season(window = Inf), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = Inf), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = 7), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
library(fable)
models_fit <- train %>%
model(stlf = decomposition_model(
STL(value ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
models_fit <- train %>%
model(stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
aug %>% features(.resid, ljung_box, lag=10, dof=0)
aug %>% features(.resid, ljung_box, lag=12, dof=0)
models_fit <- train %>%
model(
`Seasonal naive` = SNAIVE(value),
stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)),
log_stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust))
)
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
models_tst
models_tst %>% hilo(level = c(80, 95))
models_fit <- train %>%
model(
`Seasonal naive` = SNAIVE(value),
stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)),
log_stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust))
)
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Diferentes modelos') + ylab('Remesas') + xlab('Mes')
snaive_plot
models_fit <- train %>%
model(
`Seasonal naive` = SNAIVE(value),
stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)),
log_stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust))
)
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .), level = NULL) +
ggtitle('Diferentes modelos') + ylab('Remesas') + xlab('Mes')
snaive_plot
accuracy(models_tst)
accuracy(models_fit)
models_fit <- train %>%
model(
`Seasonal naive` = SNAIVE(value),
stlf = decomposition_model(
STL(value ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)),
log_stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust))
)
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .), level = NULL) +
ggtitle('Diferentes modelos') + ylab('Remesas') + xlab('Mes')
snaive_plot
models_tst
models_tst %>% hilo(level = c(80, 95))
accuracy(models_fit)
models_fit$stlf %>% ggresiduals()
models_fit$stlf %>% gg_tsresiduals()
models_fit$stlf
models_fit
train %>%
model(decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust))) %>%
gg_tsresiduals()
models_fit$log_stlf %>% gg_tsresiduals()
models_fit$log_stlf
models_fit[2]
models_fit[2] %>% gg_tsresiduals()
models_fit[3] %>% gg_tsresiduals()
models_tst %>% hilo(level = c(80, 95))
library(fable)
models_fit <- train %>%
model(`Seasonal naive` = SNAIVE(value))
models_tst <- models_fit %>% forecast(h = tstng_prds)
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
models_tst
models_tst %>% hilo(level = c(80, 95))
aug %>% autoplot(.resid) + xlab("Mes") + ylab("") +
ggtitle("Residuales del método naïve")
aug %>% autoplot(.resid) + xlab("Mes") + ylab("") +
ggtitle("Residuales del método seasonal naïve")
stl_model = data %>% dplyr::select(remesas_trn) %>% stl(s.window = 'per')
stl_model = data %>% dplyr::select(value) %>% stl(s.window = 'per')
plot(stl_model,main = 'Descomposicón de la serie con STL')
models_fit <- train %>%
model(stlf = decomposition_model(
STL(log(value) ~ trend(window = 12), robust = TRUE),
NAIVE(season_adjust)
))
models_tst <- models_fit %>% forecast(h = tstng_prds)
mape_sn <- (models_fit %>% forecast(h = tstng_prds) %>% accuracy(test))$MAPE
snaive_plot <- models_tst %>% autoplot(filter_index(data, "2018 Jan" ~ .)) +
ggtitle('Seasonal Naive') + ylab('Remesas') + xlab('Mes')
snaive_plot
library(tidyquant)
library(tidyquant)
gdp_us = tq_get("BBKMGDP", get="economic.data", from = "1995-01-01")
gdp_us
gdp_us = gdp_us %>% select(date, price) %>% as_tsibble(index=date, regular = TRUE)
gdp_us
library(tidyquant)
gdp_us = tq_get("BBKMGDP", get="economic.data", from = "1995-01-01")
gdp_us = gdp_us %>% select(date, price) %>% as_tsibble(index=yearmonth(date), regular = TRUE)
gdp_us$date = yearmonth(date)
library(tidyquant)
gdp_us = tq_get("BBKMGDP", get="economic.data", from = "1995-01-01")
gdp_us
gdp_us$date = yearmonth(date)
gdp_us$date = yearmonth(gdp_us$date)
gdp_us = gdp_us %>% select(date, price) %>% as_tsibble(index=date, regular = TRUE)
gdp_us
train_gdp <- data %>% select(value) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- data %>% select(value) %>% filter_index("2023 Jul" ~ "2023 Dec")
train_gdp = add_column(train$value)
train_gdp
add_column(train_gdp, train$value)
train_gdp = add_column(train_gdp, train$value)
test_gdp = add_column(test_gdp, test$value)
train_gdp
library(tidyquant)
gdp_us = tq_get("BBKMGDP", get="economic.data", from = "1995-01-01")
gdp_us$date = yearmonth(gdp_us$date)
gdp_us = gdp_us %>% select(date, price) %>% as_tsibble(index=date, regular = TRUE)
gdp_us
train_gdp <- data %>% select(value) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- data %>% select(value) %>% filter_index("2023 Jul" ~ "2023 Dec")
library(tidyquant)
gdp_us = tq_get("BBKMGDP", get="economic.data", from = "1995-01-01")
gdp_us$date = yearmonth(gdp_us$date)
gdp_us = gdp_us %>% select(date, price) %>% as_tsibble(index=date, regular = TRUE)
gdp_us
train_gdp <- gdp_us %>% select(price) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- gdp_us %>% select(price) %>% filter_index("2023 Jul" ~ "2023 Dec")
train_gdp = add_column(train_gdp, train$value)
test_gdp = add_column(test_gdp, test$value)
train_gdp
rename(train_gdp$`train$value`, value)
train_gdp = add_column(train_gdp, train$value)
library(tidyquant)
gdp_us = tq_get("BBKMGDP", get="economic.data", from = "1995-01-01")
gdp_us$date = yearmonth(gdp_us$date)
gdp_us = gdp_us %>% select(date, price) %>% as_tsibble(index=date, regular = TRUE)
gdp_us
train_gdp <- gdp_us %>% select(price) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- gdp_us %>% select(price) %>% filter_index("2023 Jul" ~ "2023 Dec")
train_gdp = add_column(train_gdp, train$value)
train_gdp = rename(train_gdp, c(gdp, date, value)
library(tidyquant)
train_gdp <- gdp_us %>% select(price) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- gdp_us %>% select(price) %>% filter_index("2023 Jul" ~ "2023 Dec")
train_gdp = add_column(train_gdp, train$value)
train_gdp = rename(train_gdp, c(gdp, date, value))
train_gdp = add_column(train_gdp, train$value)
train_gdp <- gdp_us %>% select(price) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- gdp_us %>% select(price) %>% filter_index("2023 Jul" ~ "2023 Dec")
train_gdp = add_column(train_gdp, train$value)
train_gdp = rename(train_gdp, c("gdp", "date", "value"))
train_gdp <- gdp_us %>% select(price) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- gdp_us %>% select(price) %>% filter_index("2023 Jul" ~ "2023 Dec")
train_gdp = add_column(train_gdp, train$value)
colnames(train_gdp)[3] = "value"
test_gdp = add_column(test_gdp, test$value)
train_gdp
fit_lm <- train_gdp |>
model(tslm = TSLM(value ~ price))
fit_lm
ggplot(aes(x = price, y = value)) +
labs(y = "Remesas)",
x = "GDP % change)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
train_gdp %>% ggplot(aes(x = price, y = value)) +
labs(y = "Remesas)",
x = "GDP % change)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
train_gdp %>% ggplot(aes(x = price, y = log(value))) +
labs(y = "Remesas)",
x = "GDP % change)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
library(tidyquant)
gdp_us = tq_get("BBKMGDP", get="economic.data", from = "1995-01-01")
gdp_us$date = yearmonth(gdp_us$date)
gdp_us
gdp_us = gdp_us %>% select(date, price) %>% as_tsibble(index=date, regular = TRUE)
gdp_us
train_gdp <- gdp_us %>% select(price) %>% filter_index("1995 Jan" ~ "2023 Jun")
test_gdp <- gdp_us %>% select(price) %>% filter_index("2023 Jul" ~ "2023 Dec")
train_gdp = add_column(train_gdp, train$value) #append remesas
train_gdp
colnames(train_gdp)[3] = "value"
train_gdp
colnames(test_gdp)[3] = "value"
train_gdp %>% ggplot(aes(x = price, y = log(value))) +
labs(y = "Remesas)",
x = "GDP % change)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
?filter
